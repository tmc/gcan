// Code generated by protoc-gen-go.
// source: gcan.proto
// DO NOT EDIT!

/*
Package gcanpb is a generated protocol buffer package.

It is generated from these files:
	gcan.proto

It has these top-level messages:
	MessageSet
	Message
	SendRequest
	SendResponse
	ReceiveRequest
	ReceiveResponse
*/
package gcanpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Err int32

const (
	Err_OK                Err = 0
	Err_Unknown           Err = 1
	Err_CRCChecksumFailed Err = 2
)

var Err_name = map[int32]string{
	0: "OK",
	1: "Unknown",
	2: "CRCChecksumFailed",
}
var Err_value = map[string]int32{
	"OK":                0,
	"Unknown":           1,
	"CRCChecksumFailed": 2,
}

func (x Err) String() string {
	return proto.EnumName(Err_name, int32(x))
}
func (Err) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MessageCompression int32

const (
	Message_NONE   MessageCompression = 0
	Message_ZLIB   MessageCompression = 1
	Message_SNAPPY MessageCompression = 2
)

var MessageCompression_name = map[int32]string{
	0: "NONE",
	1: "ZLIB",
	2: "SNAPPY",
}
var MessageCompression_value = map[string]int32{
	"NONE":   0,
	"ZLIB":   1,
	"SNAPPY": 2,
}

func (x MessageCompression) String() string {
	return proto.EnumName(MessageCompression_name, int32(x))
}
func (MessageCompression) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// MessageSet is the shared encoding that is used both on disk and over the wire.
type MessageSet struct {
	// Offset is not populated by producers.
	Offset   int64      `protobuf:"varint,1,opt,name=Offset" json:"Offset,omitempty"`
	Messages []*Message `protobuf:"bytes,2,rep,name=Messages" json:"Messages,omitempty"`
}

func (m *MessageSet) Reset()                    { *m = MessageSet{} }
func (m *MessageSet) String() string            { return proto.CompactTextString(m) }
func (*MessageSet) ProtoMessage()               {}
func (*MessageSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MessageSet) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Message is an individual key-value pair.
type Message struct {
	// CRC32 of all following fields
	CRC         uint32             `protobuf:"varint,1,opt,name=CRC" json:"CRC,omitempty"`
	Compression MessageCompression `protobuf:"varint,2,opt,name=Compression,enum=gcanpb.MessageCompression" json:"Compression,omitempty"`
	Key         []byte             `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
	Value       []byte             `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SendRequest struct {
	Topic      string      `protobuf:"bytes,1,opt,name=Topic" json:"Topic,omitempty"`
	MessageSet *MessageSet `protobuf:"bytes,2,opt,name=MessageSet" json:"MessageSet,omitempty"`
}

func (m *SendRequest) Reset()                    { *m = SendRequest{} }
func (m *SendRequest) String() string            { return proto.CompactTextString(m) }
func (*SendRequest) ProtoMessage()               {}
func (*SendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SendRequest) GetMessageSet() *MessageSet {
	if m != nil {
		return m.MessageSet
	}
	return nil
}

type SendResponse struct {
}

func (m *SendResponse) Reset()                    { *m = SendResponse{} }
func (m *SendResponse) String() string            { return proto.CompactTextString(m) }
func (*SendResponse) ProtoMessage()               {}
func (*SendResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ReceiveRequest struct {
	Topic     string `protobuf:"bytes,1,opt,name=Topic" json:"Topic,omitempty"`
	Partition uint32 `protobuf:"varint,2,opt,name=Partition" json:"Partition,omitempty"`
	Offset    uint64 `protobuf:"varint,3,opt,name=Offset" json:"Offset,omitempty"`
}

func (m *ReceiveRequest) Reset()                    { *m = ReceiveRequest{} }
func (m *ReceiveRequest) String() string            { return proto.CompactTextString(m) }
func (*ReceiveRequest) ProtoMessage()               {}
func (*ReceiveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ReceiveResponse struct {
	Topic      string      `protobuf:"bytes,1,opt,name=Topic" json:"Topic,omitempty"`
	Partition  uint32      `protobuf:"varint,2,opt,name=Partition" json:"Partition,omitempty"`
	MessageSet *MessageSet `protobuf:"bytes,3,opt,name=MessageSet" json:"MessageSet,omitempty"`
}

func (m *ReceiveResponse) Reset()                    { *m = ReceiveResponse{} }
func (m *ReceiveResponse) String() string            { return proto.CompactTextString(m) }
func (*ReceiveResponse) ProtoMessage()               {}
func (*ReceiveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReceiveResponse) GetMessageSet() *MessageSet {
	if m != nil {
		return m.MessageSet
	}
	return nil
}

func init() {
	proto.RegisterType((*MessageSet)(nil), "gcanpb.MessageSet")
	proto.RegisterType((*Message)(nil), "gcanpb.Message")
	proto.RegisterType((*SendRequest)(nil), "gcanpb.SendRequest")
	proto.RegisterType((*SendResponse)(nil), "gcanpb.SendResponse")
	proto.RegisterType((*ReceiveRequest)(nil), "gcanpb.ReceiveRequest")
	proto.RegisterType((*ReceiveResponse)(nil), "gcanpb.ReceiveResponse")
	proto.RegisterEnum("gcanpb.Err", Err_name, Err_value)
	proto.RegisterEnum("gcanpb.MessageCompression", MessageCompression_name, MessageCompression_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Producer service

type ProducerClient interface {
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	SendStream(ctx context.Context, opts ...grpc.CallOption) (Producer_SendStreamClient, error)
}

type producerClient struct {
	cc *grpc.ClientConn
}

func NewProducerClient(cc *grpc.ClientConn) ProducerClient {
	return &producerClient{cc}
}

func (c *producerClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := grpc.Invoke(ctx, "/gcanpb.Producer/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerClient) SendStream(ctx context.Context, opts ...grpc.CallOption) (Producer_SendStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Producer_serviceDesc.Streams[0], c.cc, "/gcanpb.Producer/SendStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &producerSendStreamClient{stream}
	return x, nil
}

type Producer_SendStreamClient interface {
	Send(*SendRequest) error
	Recv() (*SendResponse, error)
	grpc.ClientStream
}

type producerSendStreamClient struct {
	grpc.ClientStream
}

func (x *producerSendStreamClient) Send(m *SendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *producerSendStreamClient) Recv() (*SendResponse, error) {
	m := new(SendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Producer service

type ProducerServer interface {
	Send(context.Context, *SendRequest) (*SendResponse, error)
	SendStream(Producer_SendStreamServer) error
}

func RegisterProducerServer(s *grpc.Server, srv ProducerServer) {
	s.RegisterService(&_Producer_serviceDesc, srv)
}

func _Producer_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ProducerServer).Send(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Producer_SendStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProducerServer).SendStream(&producerSendStreamServer{stream})
}

type Producer_SendStreamServer interface {
	Send(*SendResponse) error
	Recv() (*SendRequest, error)
	grpc.ServerStream
}

type producerSendStreamServer struct {
	grpc.ServerStream
}

func (x *producerSendStreamServer) Send(m *SendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *producerSendStreamServer) Recv() (*SendRequest, error) {
	m := new(SendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Producer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gcanpb.Producer",
	HandlerType: (*ProducerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Producer_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStream",
			Handler:       _Producer_SendStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

// Client API for Consumer service

type ConsumerClient interface {
	Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (Consumer_ReceiveClient, error)
}

type consumerClient struct {
	cc *grpc.ClientConn
}

func NewConsumerClient(cc *grpc.ClientConn) ConsumerClient {
	return &consumerClient{cc}
}

func (c *consumerClient) Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (Consumer_ReceiveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Consumer_serviceDesc.Streams[0], c.cc, "/gcanpb.Consumer/Receive", opts...)
	if err != nil {
		return nil, err
	}
	x := &consumerReceiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Consumer_ReceiveClient interface {
	Recv() (*ReceiveResponse, error)
	grpc.ClientStream
}

type consumerReceiveClient struct {
	grpc.ClientStream
}

func (x *consumerReceiveClient) Recv() (*ReceiveResponse, error) {
	m := new(ReceiveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Consumer service

type ConsumerServer interface {
	Receive(*ReceiveRequest, Consumer_ReceiveServer) error
}

func RegisterConsumerServer(s *grpc.Server, srv ConsumerServer) {
	s.RegisterService(&_Consumer_serviceDesc, srv)
}

func _Consumer_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsumerServer).Receive(m, &consumerReceiveServer{stream})
}

type Consumer_ReceiveServer interface {
	Send(*ReceiveResponse) error
	grpc.ServerStream
}

type consumerReceiveServer struct {
	grpc.ServerStream
}

func (x *consumerReceiveServer) Send(m *ReceiveResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Consumer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gcanpb.Consumer",
	HandlerType: (*ConsumerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Receive",
			Handler:       _Consumer_Receive_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x52, 0x5d, 0x6f, 0x94, 0x40,
	0x14, 0xed, 0x2c, 0xc8, 0xd2, 0x4b, 0x97, 0xd2, 0xf1, 0x8b, 0xd4, 0x97, 0xca, 0x83, 0x21, 0x26,
	0x92, 0x95, 0x3e, 0xab, 0xb1, 0x58, 0x13, 0xad, 0xee, 0x92, 0x45, 0x4d, 0xd4, 0x27, 0xca, 0xde,
	0x56, 0xd2, 0xc2, 0xe0, 0x0c, 0x68, 0x7c, 0xf1, 0x4f, 0xf8, 0x87, 0x9d, 0x61, 0x41, 0xd9, 0x9a,
	0x4d, 0xec, 0xdb, 0xfd, 0x3a, 0x87, 0x73, 0x0e, 0x03, 0x70, 0x9e, 0xa5, 0x65, 0x50, 0x71, 0x56,
	0x33, 0x6a, 0xa8, 0xba, 0x3a, 0xf5, 0x9e, 0x01, 0xbc, 0x45, 0x21, 0xd2, 0x73, 0x4c, 0xb0, 0xa6,
	0x36, 0x18, 0xf3, 0xb3, 0x33, 0x81, 0xb5, 0x4b, 0x0e, 0x88, 0xaf, 0xd1, 0xfb, 0x60, 0x76, 0x5b,
	0xe1, 0x8e, 0x0e, 0x34, 0xdf, 0x0a, 0x77, 0x83, 0x15, 0x30, 0xe8, 0xe6, 0xde, 0x2f, 0x02, 0xe3,
	0xae, 0xa6, 0x16, 0x68, 0xd1, 0x22, 0x6a, 0xb1, 0x13, 0x3a, 0x05, 0x2b, 0x62, 0x45, 0xc5, 0xe5,
	0x2e, 0x67, 0xa5, 0x84, 0x13, 0xdf, 0x0e, 0xef, 0x5d, 0x81, 0x07, 0xd9, 0xdf, 0x13, 0x05, 0x3f,
	0xc1, 0x1f, 0xae, 0x26, 0x2f, 0x77, 0xe8, 0x04, 0x6e, 0x7c, 0x48, 0x2f, 0x1b, 0x74, 0x75, 0xd5,
	0x7a, 0x8f, 0xc0, 0x1a, 0x9e, 0x9a, 0xa0, 0xcf, 0xe6, 0xb3, 0x63, 0x67, 0x4b, 0x55, 0x9f, 0xde,
	0xbc, 0x3a, 0x72, 0x08, 0x05, 0x30, 0x92, 0xd9, 0xf3, 0x38, 0xfe, 0xe8, 0x8c, 0xbc, 0x17, 0x60,
	0x25, 0x58, 0x2e, 0x17, 0xf8, 0xb5, 0x41, 0x51, 0x2b, 0xb2, 0x77, 0xac, 0xca, 0xb3, 0x56, 0xda,
	0x36, 0x7d, 0x30, 0x34, 0xdd, 0x2a, 0xb3, 0x42, 0x7a, 0x45, 0x99, 0xdc, 0x78, 0x36, 0xec, 0xac,
	0x58, 0x44, 0xc5, 0x4a, 0x81, 0xde, 0x11, 0xd8, 0x0b, 0xcc, 0x30, 0xff, 0x86, 0x1b, 0x88, 0xf7,
	0x60, 0x3b, 0x4e, 0x79, 0x9d, 0xd7, 0xbd, 0xe3, 0xc9, 0x20, 0x52, 0xe5, 0x4b, 0xf7, 0x3e, 0xc3,
	0xee, 0x1f, 0x8e, 0x15, 0xed, 0x7f, 0x90, 0xac, 0x0b, 0xd6, 0x36, 0x09, 0x7e, 0xf8, 0x18, 0xb4,
	0x63, 0xce, 0xa9, 0x01, 0xa3, 0xf9, 0x89, 0xcc, 0xc6, 0x82, 0xf1, 0xfb, 0xf2, 0xa2, 0x64, 0xdf,
	0x4b, 0x19, 0xcf, 0x6d, 0xd8, 0x93, 0x3f, 0x27, 0xfa, 0x82, 0xd9, 0x85, 0x68, 0x8a, 0x97, 0x69,
	0x7e, 0x89, 0x4b, 0x67, 0x14, 0xfe, 0x04, 0x33, 0xe6, 0x6c, 0xd9, 0x64, 0xc8, 0xe9, 0x21, 0xe8,
	0xca, 0x2f, 0xbd, 0xd9, 0x53, 0x0f, 0x32, 0xdc, 0xbf, 0xb5, 0x3e, 0xec, 0x22, 0xd9, 0xa2, 0x4f,
	0x00, 0xd4, 0x24, 0xa9, 0x39, 0xa6, 0xc5, 0xb5, 0xa0, 0x3e, 0x99, 0x92, 0xf0, 0x35, 0x98, 0x91,
	0x6c, 0x9b, 0x42, 0x7e, 0xff, 0x29, 0x8c, 0xbb, 0x6c, 0xe8, 0x9d, 0x1e, 0xb2, 0x1e, 0xf8, 0xfe,
	0xdd, 0x7f, 0xe6, 0x3d, 0xdb, 0x94, 0x9c, 0x1a, 0xed, 0xdb, 0x3e, 0xfc, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0x40, 0x4a, 0x7b, 0x6b, 0xe9, 0x02, 0x00, 0x00,
}
