// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gcan.proto

package gcanpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Err int32

const (
	Err_OK                Err = 0
	Err_Unknown           Err = 1
	Err_CRCChecksumFailed Err = 2
)

var Err_name = map[int32]string{
	0: "OK",
	1: "Unknown",
	2: "CRCChecksumFailed",
}
var Err_value = map[string]int32{
	"OK":                0,
	"Unknown":           1,
	"CRCChecksumFailed": 2,
}

func (x Err) String() string {
	return proto.EnumName(Err_name, int32(x))
}
func (Err) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_gcan_05fb6d84d9aa88c0, []int{0}
}

type MessageCompression int32

const (
	Message_NONE   MessageCompression = 0
	Message_ZLIB   MessageCompression = 1
	Message_SNAPPY MessageCompression = 2
)

var MessageCompression_name = map[int32]string{
	0: "NONE",
	1: "ZLIB",
	2: "SNAPPY",
}
var MessageCompression_value = map[string]int32{
	"NONE":   0,
	"ZLIB":   1,
	"SNAPPY": 2,
}

func (x MessageCompression) String() string {
	return proto.EnumName(MessageCompression_name, int32(x))
}
func (MessageCompression) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_gcan_05fb6d84d9aa88c0, []int{1, 0}
}

// MessageSet is the shared encoding that is used both on disk and over the wire.
type MessageSet struct {
	// Offset is not populated by producers.
	Offset               int64      `protobuf:"varint,1,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Messages             []*Message `protobuf:"bytes,2,rep,name=Messages,proto3" json:"Messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MessageSet) Reset()         { *m = MessageSet{} }
func (m *MessageSet) String() string { return proto.CompactTextString(m) }
func (*MessageSet) ProtoMessage()    {}
func (*MessageSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_gcan_05fb6d84d9aa88c0, []int{0}
}
func (m *MessageSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageSet.Unmarshal(m, b)
}
func (m *MessageSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageSet.Marshal(b, m, deterministic)
}
func (dst *MessageSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageSet.Merge(dst, src)
}
func (m *MessageSet) XXX_Size() int {
	return xxx_messageInfo_MessageSet.Size(m)
}
func (m *MessageSet) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageSet.DiscardUnknown(m)
}

var xxx_messageInfo_MessageSet proto.InternalMessageInfo

func (m *MessageSet) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *MessageSet) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Message is an individual key-value pair.
type Message struct {
	// CRC32 of all following fields
	CRC                  uint32             `protobuf:"varint,1,opt,name=CRC,proto3" json:"CRC,omitempty"`
	Compression          MessageCompression `protobuf:"varint,2,opt,name=Compression,proto3,enum=gcanpb.MessageCompression" json:"Compression,omitempty"`
	Key                  []byte             `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
	Value                []byte             `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_gcan_05fb6d84d9aa88c0, []int{1}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetCRC() uint32 {
	if m != nil {
		return m.CRC
	}
	return 0
}

func (m *Message) GetCompression() MessageCompression {
	if m != nil {
		return m.Compression
	}
	return Message_NONE
}

func (m *Message) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Message) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type SendRequest struct {
	Topic                string      `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
	MessageSet           *MessageSet `protobuf:"bytes,2,opt,name=MessageSet,proto3" json:"MessageSet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SendRequest) Reset()         { *m = SendRequest{} }
func (m *SendRequest) String() string { return proto.CompactTextString(m) }
func (*SendRequest) ProtoMessage()    {}
func (*SendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_gcan_05fb6d84d9aa88c0, []int{2}
}
func (m *SendRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendRequest.Unmarshal(m, b)
}
func (m *SendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendRequest.Marshal(b, m, deterministic)
}
func (dst *SendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRequest.Merge(dst, src)
}
func (m *SendRequest) XXX_Size() int {
	return xxx_messageInfo_SendRequest.Size(m)
}
func (m *SendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendRequest proto.InternalMessageInfo

func (m *SendRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *SendRequest) GetMessageSet() *MessageSet {
	if m != nil {
		return m.MessageSet
	}
	return nil
}

type SendResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendResponse) Reset()         { *m = SendResponse{} }
func (m *SendResponse) String() string { return proto.CompactTextString(m) }
func (*SendResponse) ProtoMessage()    {}
func (*SendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_gcan_05fb6d84d9aa88c0, []int{3}
}
func (m *SendResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendResponse.Unmarshal(m, b)
}
func (m *SendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendResponse.Marshal(b, m, deterministic)
}
func (dst *SendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendResponse.Merge(dst, src)
}
func (m *SendResponse) XXX_Size() int {
	return xxx_messageInfo_SendResponse.Size(m)
}
func (m *SendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendResponse proto.InternalMessageInfo

type ReceiveRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Partition            uint32   `protobuf:"varint,2,opt,name=Partition,proto3" json:"Partition,omitempty"`
	Offset               uint64   `protobuf:"varint,3,opt,name=Offset,proto3" json:"Offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReceiveRequest) Reset()         { *m = ReceiveRequest{} }
func (m *ReceiveRequest) String() string { return proto.CompactTextString(m) }
func (*ReceiveRequest) ProtoMessage()    {}
func (*ReceiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_gcan_05fb6d84d9aa88c0, []int{4}
}
func (m *ReceiveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceiveRequest.Unmarshal(m, b)
}
func (m *ReceiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceiveRequest.Marshal(b, m, deterministic)
}
func (dst *ReceiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveRequest.Merge(dst, src)
}
func (m *ReceiveRequest) XXX_Size() int {
	return xxx_messageInfo_ReceiveRequest.Size(m)
}
func (m *ReceiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveRequest proto.InternalMessageInfo

func (m *ReceiveRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *ReceiveRequest) GetPartition() uint32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *ReceiveRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ReceiveResponse struct {
	Topic                string      `protobuf:"bytes,1,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Partition            uint32      `protobuf:"varint,2,opt,name=Partition,proto3" json:"Partition,omitempty"`
	MessageSet           *MessageSet `protobuf:"bytes,3,opt,name=MessageSet,proto3" json:"MessageSet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ReceiveResponse) Reset()         { *m = ReceiveResponse{} }
func (m *ReceiveResponse) String() string { return proto.CompactTextString(m) }
func (*ReceiveResponse) ProtoMessage()    {}
func (*ReceiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_gcan_05fb6d84d9aa88c0, []int{5}
}
func (m *ReceiveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceiveResponse.Unmarshal(m, b)
}
func (m *ReceiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceiveResponse.Marshal(b, m, deterministic)
}
func (dst *ReceiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveResponse.Merge(dst, src)
}
func (m *ReceiveResponse) XXX_Size() int {
	return xxx_messageInfo_ReceiveResponse.Size(m)
}
func (m *ReceiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveResponse proto.InternalMessageInfo

func (m *ReceiveResponse) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *ReceiveResponse) GetPartition() uint32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *ReceiveResponse) GetMessageSet() *MessageSet {
	if m != nil {
		return m.MessageSet
	}
	return nil
}

func init() {
	proto.RegisterType((*MessageSet)(nil), "gcanpb.MessageSet")
	proto.RegisterType((*Message)(nil), "gcanpb.Message")
	proto.RegisterType((*SendRequest)(nil), "gcanpb.SendRequest")
	proto.RegisterType((*SendResponse)(nil), "gcanpb.SendResponse")
	proto.RegisterType((*ReceiveRequest)(nil), "gcanpb.ReceiveRequest")
	proto.RegisterType((*ReceiveResponse)(nil), "gcanpb.ReceiveResponse")
	proto.RegisterEnum("gcanpb.Err", Err_name, Err_value)
	proto.RegisterEnum("gcanpb.MessageCompression", MessageCompression_name, MessageCompression_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProducerClient is the client API for Producer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProducerClient interface {
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	SendStream(ctx context.Context, opts ...grpc.CallOption) (Producer_SendStreamClient, error)
}

type producerClient struct {
	cc *grpc.ClientConn
}

func NewProducerClient(cc *grpc.ClientConn) ProducerClient {
	return &producerClient{cc}
}

func (c *producerClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, "/gcanpb.Producer/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producerClient) SendStream(ctx context.Context, opts ...grpc.CallOption) (Producer_SendStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Producer_serviceDesc.Streams[0], "/gcanpb.Producer/SendStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &producerSendStreamClient{stream}
	return x, nil
}

type Producer_SendStreamClient interface {
	Send(*SendRequest) error
	Recv() (*SendResponse, error)
	grpc.ClientStream
}

type producerSendStreamClient struct {
	grpc.ClientStream
}

func (x *producerSendStreamClient) Send(m *SendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *producerSendStreamClient) Recv() (*SendResponse, error) {
	m := new(SendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProducerServer is the server API for Producer service.
type ProducerServer interface {
	Send(context.Context, *SendRequest) (*SendResponse, error)
	SendStream(Producer_SendStreamServer) error
}

func RegisterProducerServer(s *grpc.Server, srv ProducerServer) {
	s.RegisterService(&_Producer_serviceDesc, srv)
}

func _Producer_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducerServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gcanpb.Producer/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducerServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Producer_SendStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProducerServer).SendStream(&producerSendStreamServer{stream})
}

type Producer_SendStreamServer interface {
	Send(*SendResponse) error
	Recv() (*SendRequest, error)
	grpc.ServerStream
}

type producerSendStreamServer struct {
	grpc.ServerStream
}

func (x *producerSendStreamServer) Send(m *SendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *producerSendStreamServer) Recv() (*SendRequest, error) {
	m := new(SendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Producer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gcanpb.Producer",
	HandlerType: (*ProducerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Producer_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStream",
			Handler:       _Producer_SendStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gcan.proto",
}

// ConsumerClient is the client API for Consumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsumerClient interface {
	Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (Consumer_ReceiveClient, error)
}

type consumerClient struct {
	cc *grpc.ClientConn
}

func NewConsumerClient(cc *grpc.ClientConn) ConsumerClient {
	return &consumerClient{cc}
}

func (c *consumerClient) Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (Consumer_ReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Consumer_serviceDesc.Streams[0], "/gcanpb.Consumer/Receive", opts...)
	if err != nil {
		return nil, err
	}
	x := &consumerReceiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Consumer_ReceiveClient interface {
	Recv() (*ReceiveResponse, error)
	grpc.ClientStream
}

type consumerReceiveClient struct {
	grpc.ClientStream
}

func (x *consumerReceiveClient) Recv() (*ReceiveResponse, error) {
	m := new(ReceiveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsumerServer is the server API for Consumer service.
type ConsumerServer interface {
	Receive(*ReceiveRequest, Consumer_ReceiveServer) error
}

func RegisterConsumerServer(s *grpc.Server, srv ConsumerServer) {
	s.RegisterService(&_Consumer_serviceDesc, srv)
}

func _Consumer_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsumerServer).Receive(m, &consumerReceiveServer{stream})
}

type Consumer_ReceiveServer interface {
	Send(*ReceiveResponse) error
	grpc.ServerStream
}

type consumerReceiveServer struct {
	grpc.ServerStream
}

func (x *consumerReceiveServer) Send(m *ReceiveResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Consumer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gcanpb.Consumer",
	HandlerType: (*ConsumerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Receive",
			Handler:       _Consumer_Receive_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gcan.proto",
}

func init() { proto.RegisterFile("gcan.proto", fileDescriptor_gcan_05fb6d84d9aa88c0) }

var fileDescriptor_gcan_05fb6d84d9aa88c0 = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x4f, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0xb3, 0x76, 0x70, 0xd2, 0x71, 0x9b, 0x9a, 0xa1, 0x14, 0xab, 0x70, 0x88, 0x7c, 0xb2,
	0x40, 0x44, 0xc5, 0x3d, 0x17, 0x09, 0xac, 0x22, 0x41, 0x21, 0x09, 0x6b, 0xfe, 0x08, 0xc4, 0xc5,
	0x75, 0xa6, 0xc5, 0x6a, 0xe3, 0x35, 0xbb, 0x36, 0xa8, 0x17, 0xbe, 0x13, 0xdf, 0x10, 0xad, 0xff,
	0xb4, 0x4e, 0x90, 0x10, 0xf4, 0x36, 0xf3, 0xf4, 0xfc, 0x9b, 0xd9, 0x37, 0x32, 0xc0, 0x59, 0x12,
	0x67, 0x93, 0x5c, 0x8a, 0x42, 0xa0, 0xa5, 0xeb, 0xfc, 0xc4, 0x7b, 0x0b, 0xf0, 0x86, 0x94, 0x8a,
	0xcf, 0x28, 0xa2, 0x02, 0x77, 0xc1, 0x9a, 0x9d, 0x9e, 0x2a, 0x2a, 0x5c, 0x36, 0x66, 0xbe, 0xc9,
	0x9b, 0x0e, 0x1f, 0xc1, 0xb0, 0x71, 0x29, 0xd7, 0x18, 0x9b, 0xbe, 0x1d, 0x6c, 0x4f, 0x6a, 0xc0,
	0xa4, 0xd1, 0xf9, 0x95, 0xc1, 0xfb, 0xc5, 0x60, 0xd0, 0x34, 0xe8, 0x80, 0x19, 0xf2, 0xb0, 0xa2,
	0x6d, 0x71, 0x5d, 0xe2, 0x21, 0xd8, 0xa1, 0x58, 0xe6, 0x92, 0x94, 0x4a, 0x45, 0xe6, 0x1a, 0x63,
	0xe6, 0x8f, 0x82, 0xfb, 0x6b, 0xb4, 0x49, 0x72, 0x6d, 0xe1, 0x5d, 0xbf, 0x06, 0x1e, 0xd3, 0xa5,
	0x6b, 0x8e, 0x99, 0xbf, 0xc9, 0x75, 0x89, 0x3b, 0x70, 0xeb, 0x43, 0x7c, 0x51, 0x92, 0xdb, 0xaf,
	0xb4, 0xba, 0xf1, 0x1e, 0x83, 0xdd, 0x61, 0xe0, 0x10, 0xfa, 0xd3, 0xd9, 0xf4, 0xc8, 0xe9, 0xe9,
	0xea, 0xf3, 0xeb, 0x97, 0xcf, 0x1d, 0x86, 0x00, 0x56, 0x34, 0x7d, 0x36, 0x9f, 0x7f, 0x72, 0x0c,
	0xef, 0x23, 0xd8, 0x11, 0x65, 0x0b, 0x4e, 0xdf, 0x4a, 0x52, 0x85, 0x66, 0xbe, 0x13, 0x79, 0x9a,
	0x54, 0x8b, 0x6f, 0xf0, 0xba, 0xc1, 0xa0, 0x9b, 0x55, 0xb5, 0xb9, 0x1d, 0xe0, 0xda, 0xe6, 0x11,
	0x15, 0xbc, 0xe3, 0xf2, 0x46, 0xb0, 0x59, 0x83, 0x55, 0x2e, 0x32, 0x45, 0xde, 0x17, 0x18, 0x71,
	0x4a, 0x28, 0xfd, 0x4e, 0x7f, 0x9f, 0xf5, 0x00, 0x36, 0xe6, 0xb1, 0x2c, 0xd2, 0xa2, 0x0d, 0x69,
	0x8b, 0x5f, 0x0b, 0x9d, 0x3b, 0xe9, 0x20, 0xfa, 0xed, 0x9d, 0xbc, 0x4b, 0xd8, 0xbe, 0xa2, 0xd7,
	0x03, 0x6f, 0x84, 0x5f, 0x7d, 0xa8, 0xf9, 0x2f, 0x0f, 0x7d, 0xf8, 0x04, 0xcc, 0x23, 0x29, 0xd1,
	0x02, 0x63, 0x76, 0xec, 0xf4, 0xd0, 0x86, 0xc1, 0xfb, 0xec, 0x3c, 0x13, 0x3f, 0x32, 0x87, 0xe1,
	0x5d, 0xb8, 0x1d, 0xf2, 0x30, 0xfc, 0x4a, 0xc9, 0xb9, 0x2a, 0x97, 0x2f, 0xe2, 0xf4, 0x82, 0x16,
	0x8e, 0x11, 0xfc, 0x84, 0xe1, 0x5c, 0x8a, 0x45, 0x99, 0x90, 0xc4, 0x03, 0xe8, 0xeb, 0x9c, 0xf0,
	0x4e, 0x3b, 0xa6, 0x73, 0x8e, 0xbd, 0x9d, 0x55, 0xb1, 0x89, 0xb2, 0x87, 0x87, 0x00, 0x5a, 0x89,
	0x0a, 0x49, 0xf1, 0xf2, 0xbf, 0x3e, 0xf5, 0xd9, 0x3e, 0x0b, 0x5e, 0xc1, 0x30, 0x14, 0x99, 0x2a,
	0x97, 0x24, 0xf1, 0x29, 0x0c, 0x9a, 0xe4, 0x70, 0xb7, 0xfd, 0x64, 0xf5, 0x50, 0x7b, 0xf7, 0xfe,
	0xd0, 0x5b, 0xda, 0x3e, 0x3b, 0xb1, 0xaa, 0xdf, 0xea, 0xe0, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x71, 0x39, 0x9d, 0x27, 0x64, 0x03, 0x00, 0x00,
}
